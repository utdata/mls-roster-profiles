[
  {
    "objectID": "03-quality-checks.html",
    "href": "03-quality-checks.html",
    "title": "Quality checks",
    "section": "",
    "text": "Because we are extracting this data from PDF’s I used this file to troubleshoot and make sure all this is good."
  },
  {
    "objectID": "03-quality-checks.html#fixed-issues",
    "href": "03-quality-checks.html#fixed-issues",
    "title": "Quality checks",
    "section": "Fixed issues",
    "text": "Fixed issues\n\nIn the Cleaning roster notebook the roster_type == “SUPPLEMENTAL SPOT 31” was changed to just “SUPPLEMENTAL SPOT” for consistency. The roster has the “31” in all cases but seems odd to keep here. I can change later if needed.\nIn others there were initially some missing players. I ended up piecing everything together in Cleaning other.\nAlso in others I had to rework how players were awarded different types and notes because in the original list players can be listed more than once with different designations. I had to collapse all of that.\n\nThere aren’t any known issues as of now, but I’m keeping this notebook around for now."
  },
  {
    "objectID": "03-quality-checks.html#setup",
    "href": "03-quality-checks.html#setup",
    "title": "Quality checks",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\nlibrary(janitor)"
  },
  {
    "objectID": "03-quality-checks.html#import-the-rosters",
    "href": "03-quality-checks.html#import-the-rosters",
    "title": "Quality checks",
    "section": "Import the rosters",
    "text": "Import the rosters\n\nrosters &lt;- read_rds(\"data-processed/rosters.rds\")\n\nrosters |&gt; glimpse()\n\nRows: 868\nColumns: 8\n$ club_short         &lt;chr&gt; \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"A…\n$ club               &lt;chr&gt; \"Atlanta United\", \"Atlanta United\", \"Atlanta United…\n$ roster_type        &lt;chr&gt; \"SENIOR ROSTER\", \"SENIOR ROSTER\", \"SENIOR ROSTER\", …\n$ name               &lt;chr&gt; \"Luis Abram\", \"Thiago Almada\", \"Josh Cohen\", \"Giorg…\n$ roster_designation &lt;chr&gt; \"TAM Player\", \"Young Designated Player\", NA, \"Desig…\n$ current_status     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, \"Unavailable - On Loan\"…\n$ contract_thru      &lt;chr&gt; \"2025\", \"2026\", \"2025\", \"2025\", \"2027\", \"2024\", \"20…\n$ option_years       &lt;chr&gt; \"2026\", NA, \"2026\", \"2026\", \"2028\", \"2025\", \"2025\",…\n\n\nDo I have all the teams?\n\nrosters |&gt; \n  count(club_short)\n\n\n  \n\n\n\nThere are 29 teams in the MLS as of May 2, 2024.\nLet’s spot check some teams.\n\nrosters |&gt; filter(club_short == \"PHI\")"
  },
  {
    "objectID": "03-quality-checks.html#others",
    "href": "03-quality-checks.html#others",
    "title": "Quality checks",
    "section": "Others",
    "text": "Others\nWe look at the others file here.\n\nothers &lt;- read_rds(\"data-processed/others.rds\")\n\nothers |&gt; glimpse()\n\nRows: 337\nColumns: 11\nGroups: club_short [29]\n$ club_short    &lt;chr&gt; \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", …\n$ name          &lt;chr&gt; \"Aiden McFadden\", \"Bartosz Slisz\", \"Edwin Mosquera\", \"Er…\n$ type_dp       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, F…\n$ type_u22      &lt;lgl&gt; FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FA…\n$ type_int      &lt;lgl&gt; FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE…\n$ type_inj      &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ type_una      &lt;lgl&gt; TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FAL…\n$ notes_young   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ notes_unavail &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, F…\n$ notes_notam   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, F…\n$ notes_can     &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n\n\n\nMissing teams\nAt one point we were missing teams. Here we make sure there are 29.\n\nothers |&gt; \n  count(club_short)\n\n\n  \n\n\n\n\n\nChecking season-ending list\nI noticed this because we were missing injured players. Here I check for them.\n\nothers |&gt; \n  filter(type_inj == TRUE)"
  },
  {
    "objectID": "03-quality-checks.html#profiles-check",
    "href": "03-quality-checks.html#profiles-check",
    "title": "Quality checks",
    "section": "Profiles check",
    "text": "Profiles check\nThe last check of everything\n\nprofiles &lt;- read_rds(\"data-processed/profiles.rds\")\n\nprofiles |&gt; filter(club_short == \"CLB\")\n\n\n  \n\n\n\nExample for index page\n\nprofiles |&gt; filter(club_short == \"ATX\") |&gt; \n head(2) |&gt; glimpse()\n\nRows: 2\nColumns: 17\n$ club_short         &lt;chr&gt; \"ATX\", \"ATX\"\n$ club               &lt;chr&gt; \"Austin FC\", \"Austin FC\"\n$ roster_type        &lt;chr&gt; \"SENIOR ROSTER\", \"SENIOR ROSTER\"\n$ name               &lt;chr&gt; \"Guilherme Biro\", \"Julio Cascante\"\n$ roster_designation &lt;chr&gt; NA, \"TAM Player\"\n$ current_status     &lt;chr&gt; NA, NA\n$ contract_thru      &lt;chr&gt; \"2026\", \"2025\"\n$ option_years       &lt;chr&gt; \"2027\", \"2026\"\n$ type_dp            &lt;lgl&gt; FALSE, FALSE\n$ type_u22           &lt;lgl&gt; FALSE, FALSE\n$ type_int           &lt;lgl&gt; TRUE, FALSE\n$ type_inj           &lt;lgl&gt; FALSE, FALSE\n$ type_una           &lt;lgl&gt; FALSE, FALSE\n$ notes_young        &lt;lgl&gt; FALSE, FALSE\n$ notes_unavail      &lt;lgl&gt; FALSE, FALSE\n$ notes_notam        &lt;lgl&gt; FALSE, FALSE\n$ notes_can          &lt;lgl&gt; FALSE, FALSE\n\n\nHow many teams\n\nprofiles |&gt; \n  count(club_short)"
  },
  {
    "objectID": "01-01-clean-roster.html",
    "href": "01-01-clean-roster.html",
    "title": "Clean rosters",
    "section": "",
    "text": "This notebook is to clean the main roster listed on the left part of the PDF.\nSee the home page about using Pinpoint to get to this point."
  },
  {
    "objectID": "01-01-clean-roster.html#setup",
    "href": "01-01-clean-roster.html#setup",
    "title": "Clean rosters",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\nlibrary(janitor)"
  },
  {
    "objectID": "01-01-clean-roster.html#import",
    "href": "01-01-clean-roster.html#import",
    "title": "Clean rosters",
    "section": "Import",
    "text": "Import\nThis pulls in the first file that was exported from Pinpoint.\n\nroster_raw &lt;- read_csv(\"data-raw/pinpoint/Roster.csv\") |&gt; clean_names()\n\nRows: 929 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): File Name, NAME, ROSTER DESIGNATION, CURRENT STATUS, CONTRACT THRU,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "01-01-clean-roster.html#roster-cleaning",
    "href": "01-01-clean-roster.html#roster-cleaning",
    "title": "Clean rosters",
    "section": "Roster cleaning",
    "text": "Roster cleaning\n\nMake short club name\nI first need to build a club name of some type, which I’m doing from the file name. I’m basing the short code based on another dataset I have rws-mls-salaries.\nI also move around the new column and remove the Pinpoint link variable no one can use anyway.\n\nadd_short_name &lt;- roster_raw |&gt; \n  mutate(\n    club_short = str_extract(file_name, \"^\\\\w*\") |&gt; str_to_upper()\n  ) |&gt;\n  relocate(club_short) |&gt; \n  select(!c(file_name, validation_link))\n\nadd_short_name |&gt; glimpse()\n\nRows: 929\nColumns: 6\n$ club_short         &lt;chr&gt; \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"A…\n$ name               &lt;chr&gt; \"Luis Abram\", \"Thiago Almada\", \"Josh Cohen\", \"Giorg…\n$ roster_designation &lt;chr&gt; \"TAM Player\", \"Young Designated Player\", NA, \"Desig…\n$ current_status     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, \"Unavailable - On Loan\"…\n$ contract_thru      &lt;chr&gt; \"2025\", \"2026\", \"2025\", \"2025\", \"2027\", \"2024\", \"20…\n$ option_years       &lt;chr&gt; \"2026\", NA, \"2026\", \"2026\", \"2028\", \"2025\", \"2025\",…\n\n\n\n\nMake a club name\n\nadd_long_name &lt;- add_short_name |&gt; \n  mutate(\n    club = case_match(\n      club_short,\n      \"ATL\" ~ \"Atlanta United\",\n      \"ATX\" ~ \"Austin FC\",\n      \"CHI\" ~ \"Chicago Fire FC\",\n      \"CIN\" ~ \"FC Cincinnati\",\n      \"CLB\" ~ \"Columbus Crew\",\n      \"CLT\" ~ \"Charlotte FC\",\n      \"COL\" ~ \"Colorado Rapids\",\n      \"DAL\" ~ \"FC Dallas\",\n      \"DC\" ~ \"D.C. United\",\n      \"HOU\" ~ \"Houston Dynamo FC\",\n      \"LA\" ~ \"LA Galaxy\",\n      \"LAFC\" ~ \"Los Angeles Football Club\",\n      \"MIA\" ~ \"Inter Miami FC\",\n      \"MIN\" ~ \"Minnesota United FC\",\n      \"MTL\" ~ \"CF Montréal\",\n      \"NE\" ~ \"New England Revolution\",\n      \"NSH\" ~ \"Nashville FC\",\n      \"NY\" ~ \"New York Red Bulls\",\n      \"NYC\" ~ \"New York City FC\",\n      \"ORL\" ~ \"Orlando City DC\",\n      \"PHI\" ~ \"Philadelphia Union\",\n      \"POR\" ~ \"Portland Timbers\",\n      \"RSL\" ~ \"Real Salt Lake\",\n      \"SEA\" ~ \"Seatle Sounders FC\",\n      \"SJ\" ~ \"San Jose Earthquakes\",\n      \"SKC\" ~ \"Sporting Kansas City\",\n      \"STL\" ~ \"St. Louis City SC\",\n      \"TOR\" ~ \"Toronto FC\",\n      \"VAN\" ~ \"Vancouver Whitecaps FC\",\n      .default = NA\n    )\n  ) |&gt; \n  relocate(club, .after = club_short)\n\nadd_long_name\n\n\n  \n\n\n\n\n\nMake roster designation\nThe roster is really split into different categories with an overline header. That’s bad data management so I create a roster_type variable to say what category they are in.\nI have to do a lot of work to get the player categories right. You’d have to run the code line by line to really see it, but I annotated the lines below.\n\nroster_subtype &lt;- add_long_name |&gt; \n  mutate(\n1    roster_type = case_when(\n2      is.na(lag(club_short)) ~ \"SENIOR ROSTER\",\n3      lag(club_short) != club_short ~ \"SENIOR ROSTER\",\n4      str_detect(name, \"[A-Z]{3}\") ~ name,\n      .default = NA\n    )\n  ) |&gt;\n5  fill(roster_type) |&gt;\n6  relocate(roster_type, .after = club) |&gt;\n7  filter(!str_detect(name, \"[A-Z]{3}\"))\n\nroster_subtype\n\n\n1\n\nMake a roster_type variable\n\n2\n\nI use lag() to basically find the first empty row which is the top row and set roster_type to “SENIOR ROSTER”. This is just for the first row of the data. There are probably better ways to do this.\n\n3\n\nHere I find when a new row has a different team using lag(), and if so set that row to SENIOR ROSTER. This is a typical use of lag.\n\n4\n\nIf the name variable has three capital letters in a row then it is one of the categories (always in all caps) so I use name value in roster_type. This is telling me when a new roster category is starting.\n\n5\n\nThis fill() takes those roster categories and fills them down the blank rows until it hits another existing category. This gives every play their category.\n\n6\n\nI move the new column to closer to the front of the tibble.\n\n7\n\nI remove the category headers since we don’t need those anymore.\n\n\n\n\n\n  \n\n\n\n\n\nSupplemental spot name\nHere we rename SUPPLEMENTAL SPOT 31 to just SUPPLEMENTAL SPOT. It was inconsistent and I feel like the “31” needs explanation anyway. (No, I dunno what it means yet, but it is the only number used.)\n\nroster_supp &lt;- roster_subtype |&gt; \n  mutate(\n    roster_type = case_match(\n      roster_type,\n      \"SUPPLEMENTAL SPOT 31\" ~ \"SUPPLEMENTAL SPOT\",\n      .default = roster_type\n    )\n  )\n\nroster_supp |&gt; count(roster_type)"
  },
  {
    "objectID": "01-01-clean-roster.html#make-a-list-of-teams",
    "href": "01-01-clean-roster.html#make-a-list-of-teams",
    "title": "Clean rosters",
    "section": "Make a list of teams",
    "text": "Make a list of teams\nWhen I later work on the “other” player designations, I need to see if I have all the teams represented in my files. I create a list of those teams here so I can use it later.\n\nclubs &lt;- roster_supp |&gt; \n  distinct(club_short)\n\nclubs"
  },
  {
    "objectID": "01-01-clean-roster.html#export-the-files",
    "href": "01-01-clean-roster.html#export-the-files",
    "title": "Clean rosters",
    "section": "Export the files",
    "text": "Export the files\nSaving our the csv file for posterity. The rds file is the same data but in R’s native format. Also save out the clubs for later.\n\nroster_supp |&gt; write_csv(\"data-out/rosters.csv\")\nroster_supp |&gt; write_rds(\"data-processed/rosters.rds\")\nclubs |&gt; write_rds(\"data-processed/clubs.rds\")"
  },
  {
    "objectID": "01-02-clean-other.html",
    "href": "01-02-clean-other.html",
    "title": "Clean other designations",
    "section": "",
    "text": "The “Other” player type designations did not come out of pinpoint as cleanly as the main rosters. I have to pull them together based on different extractions. There have been other cleaning challenges to work through.\nThis is the second file I tackled, so there is more explanation of some techniques in Clean roster."
  },
  {
    "objectID": "01-02-clean-other.html#setup",
    "href": "01-02-clean-other.html#setup",
    "title": "Clean other designations",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\nlibrary(janitor)"
  },
  {
    "objectID": "01-02-clean-other.html#import",
    "href": "01-02-clean-other.html#import",
    "title": "Clean other designations",
    "section": "Import",
    "text": "Import\nI pull in different versions of these files that did better with different teams to make sure I have them all. Also the clubs file to compare with.\n\nclubs &lt;-  read_rds(\"data-processed/clubs.rds\")\nothers_01 &lt;- read_csv(\"data-raw/pinpoint/Other.csv\") |&gt; clean_names()\n\nRows: 761 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): File Name, NO., NAME, Validation Link\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nothers_02 &lt;- read_csv(\"data-raw/pinpoint/Other_2.csv\") |&gt; clean_names()\n\nRows: 663 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): File Name, NO., NAME, Validation Link\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "01-02-clean-other.html#make-short-club-name-function",
    "href": "01-02-clean-other.html#make-short-club-name-function",
    "title": "Clean other designations",
    "section": "Make short club name function",
    "text": "Make short club name function\nWhen I pulled out the individual files from the main PDF I named them based on their club. Here I use that name to build a short club name. Because I have to do this with several files, I made a function to do it.\n\nclub_name &lt;- function(tib) {\n  tib |&gt; \n  mutate(\n    club_short = str_extract(file_name, \"^\\\\w*\") |&gt; str_to_upper()\n  ) |&gt;\n  relocate(club_short) |&gt; \n  select(!c(file_name, validation_link))\n}\n\nSo I do this for our files …\n\nothers_club_01 &lt;- club_name(others_01)\nothers_club_02 &lt;- club_name(others_02)"
  },
  {
    "objectID": "01-02-clean-other.html#check-the-teams",
    "href": "01-02-clean-other.html#check-the-teams",
    "title": "Clean other designations",
    "section": "Check the teams",
    "text": "Check the teams\nI know from working with this that I’m missing teams in my pinpoint exports. I work through fixing that here.\nThe idea is:\n\ncompare with with the full list to find difference\nsearch other files to see if those different teams are there\n\n\nGet this list of missing files from the first set\n\n1missing_clubs &lt;- clubs |&gt;\n2  anti_join(others_club_01 |&gt; select(club_short) |&gt; distinct())\n\n3miss_club_list &lt;- missing_clubs |&gt; pull(club_short)\n\nmiss_club_list\n\n\n1\n\nTake my list of clubs and compare them to the distinct() clubs available.\n\n2\n\nI use anti_join to find the teams that are not in the first file by comparing to the distinct names in our data.\n\n3\n\nI save that list of missing teams so I can use it later.\n\n\n\n\n[1] \"LAFC\" \"NE\"   \"VAN\" \n\n\nI think doublecheck that those teams really are missing. It should be zero rows.\n\nothers_club_01 |&gt; \n  filter(club_short %in% miss_club_list)\n\n\n  \n\n\n\n\n\nCheck to see if missing clubs in new files\nHere I take the second file and see if the missing teams are in it.\n\nothers_club_02 |&gt; \n  filter(club_short %in% miss_club_list) |&gt; select(club_short) |&gt; distinct()\n\n\n  \n\n\n\nAnd indeed they are so we can use just these two files to build one good file.\n\n\nCombine missing rows to first file\nHere I filter the second file to have just our missing teams, then bind them to our original data so we have a full set.\n\nothers_combo &lt;- others_club_02 |&gt; \n  filter(club_short %in% miss_club_list) |&gt; \n  bind_rows(others_club_01)\n\n# test that I have them all\nothers_combo |&gt; \n  distinct(club_short) |&gt; arrange(club_short)"
  },
  {
    "objectID": "01-02-clean-other.html#adding-player_type-variable",
    "href": "01-02-clean-other.html#adding-player_type-variable",
    "title": "Clean other designations",
    "section": "Adding player_type variable",
    "text": "Adding player_type variable\nThis sets the player category. This is fully explained in roster cleaning.\n\nothers_type &lt;- others_combo |&gt; \n  filter(name != \"NAME\") |&gt;\n  mutate(\n    player_type = case_when(\n      is.na(lag(club_short)) ~ \"INTERNATIONAL SLOT\",\n      lag(club_short) != club_short ~ \"INTERNATIONAL SLOT\",\n      str_detect(name, \"[A-Z]{3}\") ~ name |&gt; str_trim(),\n      .default = NA\n    )\n  ) |&gt;\n  fill(player_type) |&gt; \n  filter(str_detect(no, \"^\\\\d\")) |&gt;\n  relocate(player_type, .after = club_short)\n\n\nothers_type"
  },
  {
    "objectID": "01-02-clean-other.html#build-a-clean-name",
    "href": "01-02-clean-other.html#build-a-clean-name",
    "title": "Clean other designations",
    "section": "Build a clean name",
    "text": "Build a clean name\nAnd now I clean the names to remove the character that signifies the notes. I print them out to check them. We do this here because it might help us later.\n\nothers_name_fixes &lt;- others_type |&gt; \n  mutate(\n    name_clean = str_remove_all(name, \"\\\\(Young DP\\\\)|\\\\^|\\\\*|\\\\+\") |&gt; str_trim()\n  ) |&gt;\n  relocate(name_clean, .before = name)\n\nothers_name_fixes"
  },
  {
    "objectID": "01-02-clean-other.html#set-player-type-variables",
    "href": "01-02-clean-other.html#set-player-type-variables",
    "title": "Clean other designations",
    "section": "Set player type variables",
    "text": "Set player type variables\nWe need to add a t/f value for each of the player designation types.\nLet’s first see what they are:\n\nothers_name_fixes |&gt; \n  count(player_type)\n\n\n  \n\n\n\nThen lets add variables based on them.\n\nothers_types &lt;- others_name_fixes |&gt; \n  mutate(\n    type_dp = if_else(player_type == \"DESIGNATED PLAYERS\", T, F),\n    type_u22 = if_else(player_type == \"INITIATIVE PLAYERS\", T, F),\n    type_int = if_else(player_type == \"INTERNATIONAL SLOT\", T, F),\n    type_inj = if_else(player_type == \"SEASON-ENDING INJURY LIST\", T, F),\n    type_una = if_else(player_type == \"UNAVAILABLE PLAYERS\", T, F),\n  )\n\nothers_types"
  },
  {
    "objectID": "01-02-clean-other.html#add-notes-variables",
    "href": "01-02-clean-other.html#add-notes-variables",
    "title": "Clean other designations",
    "section": "Add notes variables",
    "text": "Add notes variables\nThere are several note designations that players can have in these lists. This section creates categories based on those notes. See the index to learn more about what the notes mean.\n\nothers_notes &lt;- others_types |&gt; \n  mutate(\n    notes_young = if_else(str_detect(name, \"Young DP\"), TRUE, FALSE),\n    notes_unavail = if_else(str_detect(name, \"\\\\*\"), TRUE, FALSE),\n    notes_notam = if_else(str_detect(name, \"\\\\^\"), TRUE, FALSE),\n    notes_can =  if_else(str_detect(name, \"\\\\+\"), TRUE, FALSE),\n  )\n\nothers_notes\n\n\n  \n\n\n\n\nothers_notes |&gt; \n  filter(name_clean == \"Thiago Almada\")"
  },
  {
    "objectID": "01-02-clean-other.html#compress-the-records",
    "href": "01-02-clean-other.html#compress-the-records",
    "title": "Clean other designations",
    "section": "Compress the records",
    "text": "Compress the records\nThe challenge here is I need to combine rows to where there is one row for each player, but has all the correct “TRUE” values for all the notes and types.\nLet’s first show the challenge. Note how there is more than one row for Giorgios Giakoumakis and not all the type_ and notes_ variables are consistent.\n\nothers_notes |&gt; \n  select(!c(player_type, no, name)) |&gt; \n  arrange(club_short, name_clean) |&gt; \n  head(10)\n\n\n  \n\n\n\nAnd now we fix it … we first git rid of some columns we don’t need, then use summarize_if(is.logical, any) to collapse the rows to keep all the true values. H/T to Thomas Cason for this tip.\n\nothers_compressed &lt;- others_notes |&gt; \n  select(!c(player_type, no, name)) |&gt; \n  group_by(club_short, name_clean) |&gt;  summarize_if(is.logical, any)\n\nothers_compressed"
  },
  {
    "objectID": "01-02-clean-other.html#tighten-columns",
    "href": "01-02-clean-other.html#tighten-columns",
    "title": "Clean other designations",
    "section": "Tighten columns",
    "text": "Tighten columns\nActually I need to do is rename a column.\n\nothers_clean &lt;- others_compressed |&gt; \n  rename(name = name_clean)\n\nothers_clean |&gt; glimpse()\n\nRows: 337\nColumns: 11\nGroups: club_short [29]\n$ club_short    &lt;chr&gt; \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", …\n$ name          &lt;chr&gt; \"Aiden McFadden\", \"Bartosz Slisz\", \"Edwin Mosquera\", \"Er…\n$ type_dp       &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, F…\n$ type_u22      &lt;lgl&gt; FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE, FALSE, FA…\n$ type_int      &lt;lgl&gt; FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE…\n$ type_inj      &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ type_una      &lt;lgl&gt; TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FAL…\n$ notes_young   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ notes_unavail &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, F…\n$ notes_notam   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, F…\n$ notes_can     &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …"
  },
  {
    "objectID": "01-02-clean-other.html#export",
    "href": "01-02-clean-other.html#export",
    "title": "Clean other designations",
    "section": "Export",
    "text": "Export\nExport csv and rds versions of the files.\n\nothers_clean |&gt; write_csv(\"data-out/others.csv\")\nothers_clean |&gt; write_rds(\"data-processed/others.rds\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MLS Player Rosters",
    "section": "",
    "text": "I found out on May 2, 2024 from the Austin Chronicle’s Eric Goodman that MLS published roster information for all MLS players.\nI downloaded the rosters in hopes of extracting the data. I cleaned it up and the files are available as CSVs below. The code is here.\nAs of May 3, 2024 this is a third pass and I’m sure it could benefit from more Quality Checks. I’ve found and fixed many problems and I wouldn’t be surprised if I missed things."
  },
  {
    "objectID": "index.html#known-issues",
    "href": "index.html#known-issues",
    "title": "MLS Player Rosters",
    "section": "Known issues",
    "text": "Known issues\nThere are no known issues at this time. If you see any problems add an issue in Github or ping me on X/Twitter @crit.\nThat said I do have some to-do lists:\n\nTurn the roster_type into a factor?"
  },
  {
    "objectID": "index.html#example",
    "href": "index.html#example",
    "title": "MLS Player Rosters",
    "section": "Example",
    "text": "Example\nBelow is an image from one team plucked from the combined file.\n\n\n\nExample profile"
  },
  {
    "objectID": "index.html#published-file",
    "href": "index.html#published-file",
    "title": "MLS Player Rosters",
    "section": "Published file",
    "text": "Published file\n\nprofiles.csv is the result of this cleaning effort, where there is a single row for each player with flags for their roster player designations and notes.\n\nThis is a glimpse of the first two records from Austin FC so you can see all the column names, data types and example values.\n$ club_short         &lt;chr&gt; \"ATX\", \"ATX\"\n$ club               &lt;chr&gt; \"Austin FC\", \"Austin FC\"\n$ roster_type        &lt;chr&gt; \"SENIOR ROSTER\", \"SENIOR ROSTER\"\n$ name               &lt;chr&gt; \"Guilherme Biro\", \"Julio Cascante\"\n$ roster_designation &lt;chr&gt; NA, \"TAM Player\"\n$ current_status     &lt;chr&gt; NA, NA\n$ contract_thru      &lt;chr&gt; \"2026\", \"2025\"\n$ option_years       &lt;chr&gt; \"2027\", \"2026\"\n$ type_dp            &lt;lgl&gt; FALSE, FALSE\n$ type_u22           &lt;lgl&gt; FALSE, FALSE\n$ type_int           &lt;lgl&gt; TRUE, FALSE\n$ type_inj           &lt;lgl&gt; FALSE, FALSE\n$ type_una           &lt;lgl&gt; FALSE, FALSE\n$ notes_young        &lt;lgl&gt; FALSE, FALSE\n$ notes_unavail      &lt;lgl&gt; FALSE, FALSE\n$ notes_notam        &lt;lgl&gt; FALSE, FALSE\n$ notes_can          &lt;lgl&gt; FALSE, FALSE\nThe profiles file was compiled from bits and pieces with lots of cleaning along the way. See “How this was done” below.\nThe roster types have been added as individual logical fields because a player can hold more than one type or designation. More about those …\n\nPlayer types\nIf true, the player fits the player type designation listed on the right side of the original profiles.\n\ntype_dp: DESIGNATED PLAYER\ntype_u22: U22 INITIATIVE PLAYER\ntype_int: INTERNATIONAL SLOT\ntype_inj: SEASON-ENDING INJURY\ntype_una: UNAVAILABLE PLAYER\n\n\n\nNotes\nIf true, the player fits the notes parameter.\n\nnotes_young (Young DP) Indicates a Young Designated Player. (This wasn’t really explained on the profiles).\nnotes_unavail *Indicates player is currently unavailable, and club may receive roster/international spot relief, but not Salary Budget relief unless otherwise determined pursuant to the loan agreement.\nnotes_notam ^Player cannot be converted from a Designated Player to a non-Designated Player by using Targeted Allocation Money.\nnotes_can +In addition to the International Roster Slots, each Canadian Club is permitted to designate up to three International Players who have been under contract with MLS and registered with one or more Canadian clubs for at least one year who will not count toward the club’s International Roster Slots.\nOff-roster Homegrown players can appear in MLS matches via a Short-Term Agreement."
  },
  {
    "objectID": "index.html#how-this-was-done",
    "href": "index.html#how-this-was-done",
    "title": "MLS Player Rosters",
    "section": "How this was done",
    "text": "How this was done\n\nPinpoint extract\nI thought Google Pinpoint might be the easiest way to extract the data. Pinpoint wants individual files instead of one file with a bunch of pages, so I manually split the single document into individual files for each team. Once in Pinpoint I used Extract Structured Data tool with “table” processing to create two raw csv files:\n\ndata-raw/pinpoint/Rosters.csv has the main roster that is on the left side of the page.\ndata-raw/pinpoint/Other.csv has all the other player designations listed on the right side of the page.\n\nIn the case of this “other” data I had to do more than one pass with Pinpoint to catch all the teams so there are multiple “raw” files. They are all in the repo in the data-raw folder.\n\n\nCleaning\nAll other cleaning was done in R in Quarto notebooks:\n\nClean Roster: Cleans the rosters section\nClean Other: Cleans the other designations\nJoin files: Joins and cleans the two into the profiles\nQuality checks: Used as I was checking things\n\nThe cleaned csv files are exported into the data-out/ folder in the repo. There are also some .rds files in data-processed/"
  },
  {
    "objectID": "02-join.html",
    "href": "02-join.html",
    "title": "Join into profiles",
    "section": "",
    "text": "This notebooks takes the two cleaned files and joins them together into a single file."
  },
  {
    "objectID": "02-join.html#setup",
    "href": "02-join.html#setup",
    "title": "Join into profiles",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\nlibrary(janitor)"
  },
  {
    "objectID": "02-join.html#import",
    "href": "02-join.html#import",
    "title": "Join into profiles",
    "section": "Import",
    "text": "Import\n\nrosters &lt;- read_rds(\"data-processed/rosters.rds\")\nothers &lt;- read_rds(\"data-processed/others.rds\")"
  },
  {
    "objectID": "02-join.html#joining-the-two-lists",
    "href": "02-join.html#joining-the-two-lists",
    "title": "Join into profiles",
    "section": "Joining the two lists",
    "text": "Joining the two lists\nNow that the data has been cleaned properly, this isn’t as huge a deal.\n\nroster_profiles_joined &lt;- rosters |&gt; \n  left_join(others, by = join_by(club_short, name))\n\nroster_profiles_joined\n\n\n  \n\n\n\nAnd now to fill in missing false values. This is an interesting and complex maneuver.\nChange all the variables where the datatype is logical, and use replace_na() to fill black valuse with FALSE.\n\nroster_profiles_clean &lt;- roster_profiles_joined |&gt; \n  mutate(\n    across(where(is.logical), ~ replace_na(.x, FALSE) )\n  )\n\nroster_profiles_clean"
  },
  {
    "objectID": "02-join.html#export",
    "href": "02-join.html#export",
    "title": "Join into profiles",
    "section": "Export",
    "text": "Export\n\nroster_profiles_clean |&gt; write_csv(\"data-out/profiles.csv\")\nroster_profiles_clean |&gt; write_rds(\"data-processed/profiles.rds\")"
  }
]