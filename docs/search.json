[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MLS Player Rosters",
    "section": "",
    "text": "I found out from the Austin Chronicle’s Eric Goodman that MLS published roster information for all MLS players.\nI downloaded the rosters in hopes of extracting the data.\nAs of May 3, 2024 this is a second pass and it still could use some Quality Checks. I’ve looked over rosters pretty well. The others file hasn’t had as much scrutiny. If you see any problems add an issue in Github or ping me on X/Twitter @crit.\nFOR INSTANCE: At first I was missing some teams in “others” file because of some Pinpoint issues, but I think I have fixed them."
  },
  {
    "objectID": "index.html#published-files",
    "href": "index.html#published-files",
    "title": "MLS Player Rosters",
    "section": "Published files",
    "text": "Published files\n\nrosters.csv include the senior, supplemental and off-roster player listings for each team.\nothers.csv include the international slots, designated players, U22 players and unavailable players. This also includes “Notes” designations as outlined below.\n\nI do aim to combine these two files in a meaningful way.\n\nRoster notes\n\nnotes_young (Young DP) Indicates a Young Designated Player. (This wasn’t really explained on the profiles).\nnotes_unavail *Indicates player is currently unavailable, and club may receive roster/international spot relief, but not Salary Budget relief unless otherwise determined pursuant to the loan agreement.\nnotes_notam ^Player cannot be converted from a Designated Player to a non-Designated Player by using Targeted Allocation Money.\nnotes_can +In addition to the International Roster Slots, each Canadian Club is permitted to designate up to three International Players who have been under contract with MLS and registered with one or more Canadian clubs for at least one year who will not count toward the club’s International Roster Slots.\nOff-roster Homegrown players can appear in MLS matches via a Short-Term Agreement."
  },
  {
    "objectID": "index.html#how-this-was-done",
    "href": "index.html#how-this-was-done",
    "title": "MLS Player Rosters",
    "section": "How this was done",
    "text": "How this was done\n\nPinpoint extract\nI thought Google Pinpoint might be the easiest way to extract the data, so I split the single document into individual ones and then created two raw files:\n\ndata-raw/pinpoint/Rosters.csv has the main roster that is on the left side of the page.\ndata-raw/pinpoint/Other.csv has all the other designations on the right side of the page.\n\nIn the case of the “other” data I had to do more than one pass with Pinpoint to catch all the teams.\nI had to do some cleaning to make this into usable data. This is a quick look and I haven’t checked over everything super carefully yet.\n\n\nCleaning\nAll other cleaning was done in R notebooks:\n\nCleaning Roster.\nCleaning Other."
  },
  {
    "objectID": "02-quality.html",
    "href": "02-quality.html",
    "title": "Quality checks",
    "section": "",
    "text": "Because we are extracting this data from PDF’s I need to make sure all this is good."
  },
  {
    "objectID": "02-quality.html#known-issues",
    "href": "02-quality.html#known-issues",
    "title": "Quality checks",
    "section": "Known issues",
    "text": "Known issues\n\nIn others there are some missing players. You can tell when the no value doesn’t make sense."
  },
  {
    "objectID": "02-quality.html#fixed-issues",
    "href": "02-quality.html#fixed-issues",
    "title": "Quality checks",
    "section": "Fixed issues",
    "text": "Fixed issues\n\nIn the rosters file, the roster_type == “SUPPLEMENTAL SPOT 31” was changed to just “SUPPLEMENTAL SPOT” for consistency. The roster has the “31” in all cases but seems odd to keep here. I can change later if needed.\nFixed case where there were teams missing from the “others” data. At least I hope so"
  },
  {
    "objectID": "02-quality.html#setup",
    "href": "02-quality.html#setup",
    "title": "Quality checks",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\nlibrary(janitor)"
  },
  {
    "objectID": "02-quality.html#import-the-rosters",
    "href": "02-quality.html#import-the-rosters",
    "title": "Quality checks",
    "section": "Import the rosters",
    "text": "Import the rosters\n\nrosters &lt;- read_rds(\"data-processed/rosters.rds\")\n\nrosters |&gt; glimpse()\n\nRows: 868\nColumns: 7\n$ club_short         &lt;chr&gt; \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"A…\n$ roster_type        &lt;chr&gt; \"SENIOR ROSTER\", \"SENIOR ROSTER\", \"SENIOR ROSTER\", …\n$ name               &lt;chr&gt; \"Luis Abram\", \"Thiago Almada\", \"Josh Cohen\", \"Giorg…\n$ roster_designation &lt;chr&gt; \"TAM Player\", \"Young Designated Player\", NA, \"Desig…\n$ current_status     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, \"Unavailable - On Loan\"…\n$ contract_thru      &lt;chr&gt; \"2025\", \"2026\", \"2025\", \"2025\", \"2027\", \"2024\", \"20…\n$ option_years       &lt;chr&gt; \"2026\", NA, \"2026\", \"2026\", \"2028\", \"2025\", \"2025\",…\n\n\nDo I have all the teams?\n\nrosters |&gt; \n  count(club_short)\n\n\n  \n\n\n\nThere are 29 teams in the MLS as of May 2, 2024.\nLet’s spot check some teams.\n\nrosters |&gt; filter(club_short == \"PHI\")"
  },
  {
    "objectID": "02-quality.html#others",
    "href": "02-quality.html#others",
    "title": "Quality checks",
    "section": "Others",
    "text": "Others\nI know there are some problems here. I need to figure out how much of an issue it is.\n\nothers &lt;- read_rds(\"data-processed/others.rds\")\n\nothers |&gt; glimpse()\n\nRows: 464\nColumns: 7\n$ club_short    &lt;chr&gt; \"LAFC\", \"LAFC\", \"LAFC\", \"LAFC\", \"LAFC\", \"LAFC\", \"LAFC\", …\n$ player_type   &lt;chr&gt; \"INTERNATIONAL SLOT\", \"INTERNATIONAL SLOT\", \"INTERNATION…\n$ name          &lt;chr&gt; \"Tomás Ángel\", \"Eduard Atuesta\", \"Stipe Biuk\", \"Mateusz …\n$ notes_young   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ notes_unavail &lt;lgl&gt; FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRU…\n$ notes_notam   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ notes_can     &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n\n\n\nMissing teams\n\nothers |&gt; \n  count(club_short)\n\n\n  \n\n\n\n\n\nChecking season-ending list\n\nothers |&gt; \n  filter(player_type == \"SEASON-ENDING INJURY LIST\")\n\n\n  \n\n\n\n\n\nLast check of all the data\n\nothers |&gt; \n  arrange(club_short)"
  },
  {
    "objectID": "02-quality.html#can-i-join-these-lists-somehow",
    "href": "02-quality.html#can-i-join-these-lists-somehow",
    "title": "Quality checks",
    "section": "Can I join these lists somehow?",
    "text": "Can I join these lists somehow?\nNot really, at least not easily. If I try, I get duplicates if a player is on more than one “others” list.\n\nrosters |&gt; \n  left_join(others, by = join_by(club_short, name))\n\n\n  \n\n\n\nI might be able to do this one designation at a time\n\nStart with the roster\nFilter others to a specific player_type designation\nleft_join to bring over the player_type\nrename that new column to be the specific player_type\n\nI’ll work on this next, but I want to push these changes today."
  },
  {
    "objectID": "01-cleaning-roster.html",
    "href": "01-cleaning-roster.html",
    "title": "Cleaning rosters",
    "section": "",
    "text": "library(tidyverse)\nlibrary(janitor)"
  },
  {
    "objectID": "01-cleaning-roster.html#import",
    "href": "01-cleaning-roster.html#import",
    "title": "Cleaning rosters",
    "section": "Import",
    "text": "Import\n\nroster_raw &lt;- read_csv(\"data-raw/pinpoint/Roster.csv\") |&gt; clean_names()\n\nRows: 929 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): File Name, NAME, ROSTER DESIGNATION, CURRENT STATUS, CONTRACT THRU,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "01-cleaning-roster.html#roster-cleaning",
    "href": "01-cleaning-roster.html#roster-cleaning",
    "title": "Cleaning rosters",
    "section": "Roster cleaning",
    "text": "Roster cleaning\n\nMake short club name\n\nroster_club &lt;- roster_raw |&gt; \n  mutate(\n    club_short = str_extract(file_name, \"^\\\\w*\") |&gt; str_to_upper()\n  ) |&gt;\n  relocate(club_short) |&gt; \n  select(!c(file_name, validation_link))\n\nroster_club |&gt; glimpse()\n\nRows: 929\nColumns: 6\n$ club_short         &lt;chr&gt; \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"ATL\", \"A…\n$ name               &lt;chr&gt; \"Luis Abram\", \"Thiago Almada\", \"Josh Cohen\", \"Giorg…\n$ roster_designation &lt;chr&gt; \"TAM Player\", \"Young Designated Player\", NA, \"Desig…\n$ current_status     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, \"Unavailable - On Loan\"…\n$ contract_thru      &lt;chr&gt; \"2025\", \"2026\", \"2025\", \"2025\", \"2027\", \"2024\", \"20…\n$ option_years       &lt;chr&gt; \"2026\", NA, \"2026\", \"2026\", \"2028\", \"2025\", \"2025\",…\n\n\n\n\nMake roster designation\n\nMake a roster type variable\n\nThis is a challenge because the senior roster designation is not there.\nOnce I have senior, then I can pull from name when roster changes, then fill down.\n\n\nThis checks if name starts with three uppercase letters and if so make that the roster spot.\n\nroster_subtype &lt;- roster_club |&gt; \n  mutate(\n    roster_type = case_when(\n      is.na(lag(club_short)) ~ \"SENIOR ROSTER\",\n      lag(club_short) != club_short ~ \"SENIOR ROSTER\",\n      str_detect(name, \"[A-Z]{3}\") ~ name,\n      .default = NA\n    )\n  ) |&gt;\n  fill(roster_type) |&gt; \n  relocate(roster_type, .after = club_short) |&gt; \n  filter(!str_detect(name, \"[A-Z]{3}\")) # remove supp headers\n\nroster_subtype\n\n\n  \n\n\n\n\n\nSupplemental spot name\nRenaming the SUPPLEMENTAL SPOT 31 to just SUPPLEMENTAL SPOT\n\nroster_supp &lt;- roster_subtype |&gt; \n  mutate(\n    roster_type = case_match(\n      roster_type,\n      \"SUPPLEMENTAL SPOT 31\" ~ \"SUPPLEMENTAL SPOT\",\n      .default = roster_type\n    )\n  )\n\nroster_supp |&gt; count(roster_type)"
  },
  {
    "objectID": "01-cleaning-roster.html#make-a-list-of-teams",
    "href": "01-cleaning-roster.html#make-a-list-of-teams",
    "title": "Cleaning rosters",
    "section": "Make a list of teams",
    "text": "Make a list of teams\nWhen I work on the “other” designations, I need to see if I have all the teams represented. I create a list of those teams here so I can import and use it.\n\nclubs &lt;- roster_supp |&gt; \n  distinct(club_short)\n\nclubs"
  },
  {
    "objectID": "01-cleaning-roster.html#export-the-files",
    "href": "01-cleaning-roster.html#export-the-files",
    "title": "Cleaning rosters",
    "section": "Export the files",
    "text": "Export the files\n\nroster_supp |&gt; write_csv(\"data-out/rosters.csv\")\nroster_supp |&gt; write_rds(\"data-processed/rosters.rds\")\nclubs |&gt; write_rds(\"data-processed/clubs.rds\")"
  },
  {
    "objectID": "01-cleaning-other.html",
    "href": "01-cleaning-other.html",
    "title": "Cleaning player designations",
    "section": "",
    "text": "The “Other” player type designations did not come out of pinpoint as cleanly as the main rosters. I have to pull them together based on different extractions.\nlibrary(tidyverse)\nlibrary(janitor)"
  },
  {
    "objectID": "01-cleaning-other.html#import",
    "href": "01-cleaning-other.html#import",
    "title": "Cleaning player designations",
    "section": "Import",
    "text": "Import\nI pull in different versions of these files that did better with different teams to make sure I have them all\n\nclubs &lt;-  read_rds(\"data-processed/clubs.rds\")\nothers_01 &lt;- read_csv(\"data-raw/pinpoint/Other.csv\") |&gt; clean_names()\n\nRows: 761 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): File Name, NO., NAME, Validation Link\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nothers_02 &lt;- read_csv(\"data-raw/pinpoint/Other_2.csv\") |&gt; clean_names()\n\nRows: 663 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): File Name, NO., NAME, Validation Link\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "01-cleaning-other.html#make-short-club-name-function",
    "href": "01-cleaning-other.html#make-short-club-name-function",
    "title": "Cleaning player designations",
    "section": "Make short club name function",
    "text": "Make short club name function\nWhen I pulled out the individual files from the main PDF I named them based on their club. Here I use that name to build a short club name. Because I have to do this with several files, I made a function.\n\nshort_name &lt;- function(tib) {\n  tib |&gt; \n  mutate(\n    club_short = str_extract(file_name, \"^\\\\w*\") |&gt; str_to_upper()\n  ) |&gt;\n  relocate(club_short) |&gt; \n  select(!c(file_name, validation_link))\n}\n\nDo this for our files\n\nothers_club_01 &lt;- short_name(others_01)\nothers_club_02 &lt;- short_name(others_02)"
  },
  {
    "objectID": "01-cleaning-other.html#check-the-teams",
    "href": "01-cleaning-other.html#check-the-teams",
    "title": "Cleaning player designations",
    "section": "Check the teams",
    "text": "Check the teams\n\nCreate the club_names with the function\nGet a distinct list of names\ncompare with with the full list to find difference\nsearch other files to see if those different teams are there\n\n\nGet this list of missing files from the first set\n\nmissing_clubs &lt;- clubs |&gt; \n  anti_join(others_club_01 |&gt; select(club_short) |&gt; distinct())\n\nJoining with `by = join_by(club_short)`\n\nmiss_club_list &lt;- missing_clubs |&gt; pull(club_short)\n\nmiss_club_list\n\n[1] \"LAFC\" \"NE\"   \"VAN\" \n\n\nDouble check those teams really aren’t in the first data set.\n\nothers_club_01 |&gt; \n  filter(club_short %in% miss_club_list)\n\n\n  \n\n\n\n\n\nCheck to see if missing clubs in new files\n\nothers_club_02 |&gt; \n  filter(club_short %in% miss_club_list) |&gt; select(club_short) |&gt; distinct()\n\n\n  \n\n\n\nThey are in there so we can use just these two files\n\n\nCombine missing rows to first file\n\nothers_combo &lt;- others_club_02 |&gt; \n  filter(club_short %in% miss_club_list) |&gt; \n  bind_rows(others_club_01)\n\n# test that I have them all\nothers_combo |&gt; \n  distinct(club_short) |&gt; arrange(club_short)"
  },
  {
    "objectID": "01-cleaning-other.html#adding-player_type-variable",
    "href": "01-cleaning-other.html#adding-player_type-variable",
    "title": "Cleaning player designations",
    "section": "Adding player_type variable",
    "text": "Adding player_type variable\nThis sets the player type\n\nothers_type &lt;- others_combo |&gt; \n  filter(name != \"NAME\") |&gt;\n  mutate(\n    player_type = case_when(\n      is.na(lag(club_short)) ~ \"INTERNATIONAL SLOT\",\n      lag(club_short) != club_short ~ \"INTERNATIONAL SLOT\",\n      str_detect(name, \"[A-Z]{3}\") ~ name,\n      .default = NA\n    )\n  ) |&gt;\n  fill(player_type) |&gt; \n  filter(str_detect(no, \"^\\\\d\")) |&gt;\n  relocate(player_type, .after = club_short)\n\n\nothers_type"
  },
  {
    "objectID": "01-cleaning-other.html#add-notes-variables",
    "href": "01-cleaning-other.html#add-notes-variables",
    "title": "Cleaning player designations",
    "section": "Add notes variables",
    "text": "Add notes variables\nThere are several notes that are hopefully the same across all teams.\n\nothers_notes &lt;- others_type |&gt; \n  mutate(\n    notes_young = if_else(str_detect(name, \"Young DP\"), TRUE, FALSE),\n    notes_unavail = if_else(str_detect(name, \"\\\\*\"), TRUE, FALSE),\n    notes_notam = if_else(str_detect(name, \"\\\\^\"), TRUE, FALSE),\n    notes_can =  if_else(str_detect(name, \"\\\\+\"), TRUE, FALSE),\n  )\n\nothers_notes\n\n\n  \n\n\n\nAnd now I clean out the notes form the names. I’m leaving this to check.\n\nothers_notes_fixes &lt;- others_notes |&gt; \n  mutate(\n    name_clean = str_remove_all(name, \"\\\\(Young DP\\\\)|\\\\^|\\\\*|\\\\+\")\n  ) |&gt;\n  relocate(name_clean, .before = name)\n\nothers_notes_fixes |&gt; select(starts_with(\"name\"), starts_with(\"notes\"))  \n\n\n  \n\n\n\n\nFix player_type values\nNote the problems. The “INITIATIVE PLAYERS” shoudl be “U22 INITIATIVE PLAYERS”\n\nothers_notes_fixes |&gt; \n  count(player_type)\n\n\n  \n\n\n\n\nothers_type_fixes &lt;- others_notes_fixes |&gt; \n  mutate(\n    player_type = case_match(\n      player_type,\n      \"INITIATIVE PLAYERS\" ~ \"U22 INITIATIVE PLAYERS\",\n      .default = player_type\n    )\n  )\n\nothers_type_fixes |&gt; \n  count(player_type)"
  },
  {
    "objectID": "01-cleaning-other.html#tighten-columns",
    "href": "01-cleaning-other.html#tighten-columns",
    "title": "Cleaning player designations",
    "section": "Tighten columns",
    "text": "Tighten columns\n\nThis gets us to just the clean name.\nI’m also removing the problematic no variable which doesn’t really mean anything.\n\n\nothers_clean &lt;- others_type_fixes |&gt; \n  select(!c(name, no)) |&gt; \n  rename(name = name_clean)\n\nothers_clean |&gt; glimpse()\n\nRows: 464\nColumns: 7\n$ club_short    &lt;chr&gt; \"LAFC\", \"LAFC\", \"LAFC\", \"LAFC\", \"LAFC\", \"LAFC\", \"LAFC\", …\n$ player_type   &lt;chr&gt; \"INTERNATIONAL SLOT\", \"INTERNATIONAL SLOT\", \"INTERNATION…\n$ name          &lt;chr&gt; \"Tomás Ángel\", \"Eduard Atuesta\", \"Stipe Biuk\", \"Mateusz …\n$ notes_young   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ notes_unavail &lt;lgl&gt; FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, TRU…\n$ notes_notam   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ notes_can     &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …"
  },
  {
    "objectID": "01-cleaning-other.html#export",
    "href": "01-cleaning-other.html#export",
    "title": "Cleaning player designations",
    "section": "Export",
    "text": "Export\n\nothers_clean |&gt; write_csv(\"data-out/others.csv\")\nothers_clean |&gt; write_rds(\"data-processed/others.rds\")"
  }
]